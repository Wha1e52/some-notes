"""
https://docs.docker.com/reference/cli/docker/

Docker - это сервис для запуска приложений в контейнерах.

Преимущества:

• Приложения запускаются в изолированной среде
• Легко запускать приложения на разных серверах
• Все зависимости приложений устанавливаются внутри контейнеров
• Легко масштабировать путем увеличения количества контейнеров
• Очень удобно использовать в процессе разработки приложений
________________________________________________________________________________________________________________________
Docker состоит из восьми компонентов:
• daemon,
• client,
• registry,
• images,
• containers,
• namespaces,
• cgroups,
• union FS.

• Daemon (dockerd)
Daemon — это компонент, который принимает запросы от Docker
client. Он управляет образами и контейнерами, а также созданием
сетей внутри Docker и файловой системой UFS, которая позволяет
«прокидывать» файлы и папки с хоста внутрь контейнера. Daemon
может взаимодействовать и с другими «демонами» для управления
сервисами Docker.

• Client
Client — утилита командной строки, которая позволяет пользователю
взаимодействовать с «демоном».
Основное взаимодействие с Docker проходит с помощью одноимённой
команды — docker.
Команды docker ps, docker run, docker build отравляются на docker daemon (dockerd), который их обрабатывает.

• Registry
Registry — это реестр, в котором хранятся образы.

• Images
Images — это шаблон, по которому создаются контейнеры. Для
создания образа используется Dockerfile, где описываются слои, из
которых состоит образ. Образы могут наследоваться друг от друга, как
классы в Python.

• Containers
Контейнеры — это процесс, который запущен на основе образа. Образ
— это некий класс, а контейнер — это инстанс этого класса. Вы
можете запускать контейнеры, останавливать их, перезапускать,
объединять в единую сеть,

• Namespaces
Docker использует Namespaces в Linux для изоляции контейнеров.
Когда запускается контейнер, для него создаётся ряд неймспейсов.
Каждый контейнер работает в своём неймспейсе и ограничен им же.
Docker использует такие ограничения:
    • pid — изоляция процесса;
    • net — управление сетевыми интерфейсами;
    • ipc — управление доступом к межпроцессному
    взаимодействию;
    • mnt — управление монтированием к файловой системе;
    • uts — изоляция ядра и идентификаторов (название и версия
    хостовой ОС).

• Cgroups
Control groups позволяют Docker ограничивать ресурсы для контейнера.
Например, вы можете ограничить потребление памяти или урезать
сетевой трафик.

• Union file systems
UnionFS позволяет создавать слои в образах, благодаря которым
сборка и доставка образов становится легковесной и быстрой.
________________________________________________________________________________________________________________________
# показывает версию докера
docker version

# показывает список локальных томов
docker volume ls

# показывает информацию о volume
docker volume inspect volume_name

# для работы с удаленными докер-хостами
export DOCKER_HOST=some ip
# переключение на локальный хост
export DOCKER_HOST=

docker -H=адрес_удаленного_хоста:порт run image_name
________________________________________________________________________________________________________________________

todo Docker Hub

# создание образа с префиксом username с docker hub
docker build -t docker_hub_username/image_name .

# авторизация в docker hub
docker login

# только скачивает образ и сохраняет его локально, не запуская
docker pull image_name

# загрузить образ на docker hub (в имени образа должен быть docker_hub_username/image_name)
docker push image_name












"""