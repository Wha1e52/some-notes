# базовый образ для нашего образа. Если не указывать тег, то будет использован latest.
FROM ubuntu

# создание рабочего каталога внутри образа
WORKDIR /app

# говорит какой порт будет открыт в контейнере(ничего не открывает, просто справочная информация для других разработчиков)
EXPOSE 3000

# копирование requirements.txt в рабочий каталог
COPY requirements.txt .

# выполнить определенную команду
RUN pip install -r requirements.txt

# копирование всех файлов из текущего каталога(где лежит Dockerfile) в рабочий каталог указанный в WORKDIR
COPY . ./

# команда которая будет всегда выполняться при запуске контейнера
# (менее подвержена переопределению, и любые аргументы, переданные при запуске контейнера, будут добавлены к команде ENTRYPOINT как параметры)
# docker run <image> --option (В этом случае будет выполнена команда python main.py --option.)
ENTRYPOINT ["python", "main.py"]

# команда по умолчанию для выполнения когда создастся контейнер
# (может быть переопределена при запуске контейнера с помощью дополнительных аргументов командной строки)
# docker run <image> python other_script.py (В этом случае python other_script.py заменит CMD и будет выполнен other_script.py вместо main.py)
CMD ["python", "main.py"]

# CMD и ENTRYPOINT часто используются вместе.
# Например, ENTRYPOINT указывает основную команду, а CMD предоставляет аргументы по умолчанию, которые могут быть переопределены.
# ENTRYPOINT ["python"]
# CMD ["main.py"]
# Теперь, если вы запустите контейнер без аргументов, он выполнит python main.py. Но если вы запустите его с аргументом, например, docker run <image> other_script.py, будет выполнена команда python other_script.py.