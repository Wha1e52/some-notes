"""
Коммит - это указатель на дерево, который указывает на определенное дерево в репозитории гид.
В каждом коммите есть уникальный хэш, имя и имейл автора, описание коммита, ссылка на родительские коммиты и дерево.











# установка имени и почты пользователя
git config --global user.name "Your Name"
git config --global user.email Your Email

# проверка настроек
git config -l(--list)
git config --global -l  # Список глобальных настроек
git config --local -l  # Список локальных настроек репозитория
git config --unset <var> # Удалить переменную из настроек
git config alias.<your-alias> <command>  # Создание алиаса для команды
git config --global core.autocrlf <input|false|true>  # Настройка параметра окончания строки.
________________________________________________________________________________________________________________________
# справка по командам
git <command> --help

# создание репозитория
git init

# просмотр текущего состояния
git status

# добавить файлы в staging area
git add <file>/<directory>

# отменит изменения в указанном файле, вернув его к состоянию последнего коммита.
git restore <file>/<directory>
git restore --staged <path>  # Исключает из индекса добавленную директорию или файл по указанному пути


# сохранить (создание коммита)
git commit -m "some message"

# просмотр истории изменений (коммитов)
git log

# посмотреть тип коммита
git cat-file -t <commit hash>

# посмотреть содержимое коммита
git cat-file -p <commit hash>

# логи всех изменений
git reflog

# создает новый коммит, который отменяет изменения, внесенные указанным коммитом
git revert <commit hash>
Это позволяет откатить изменения определенного коммита, не удаляя его из истории репозитория


________________________________________________________________________________________________________________________
todo Работа с ветками

# просмотр текущей ветки и списка веток
git branch

# создание новой ветки
git branch <branch name>

# переименование текущей ветки
git branch -m <new branch name>
# удаление ветки(текущую удалить нельзя)
git branch -d <branch name>

# удаление удаленной ветки
git push origin -d(--delete) <branch name>

# создание новой ветки и переход в нее
git checkout -b <branch name>

# перейти к определенной версии/ветке проекта
git checkout <commit hash>/<branch name>

# объединение веток(указываем ветку, которую хотим объединить с текущей)
# сначала переходим в ветку(main)(receiving branch) и в нее сливаем другую ветку
git merge -m 'message' <feature branch name>

# отменить объединение
git merge --abort

# продолжить объединение после решения конфликта
git merge --continue

# копирует коммит из одной ветки в HEAD текущей ветки
git cherry-pick <commit hash>
# -n не совершать коммит
git cherry-pick -n <commit hash>


# перенос коммитов из текущей ветки на другую ветку
# сначала переходим в ветку из которой хотим перенести коммиты и только потом указываем в какую ветку
git rebase <branch name>

# слить несколько коммитов в один
git rebase -i HEAD~<n>
________________________________________________________________________________________________________________________
Удаленный репозиторий

# клонирование удаленного репозитория в локальный
git clone <url>

# загрузка и применение изменений с удаленной ветки в локальную
git pull

# отправка изменений из локальной ветки в ветку удаленного репозитория
git push

# посмотреть все ветки, включая те, что на удаленном репозитории
git branch -a

# подключение удаленного репозитория
git remote add origin <url>

# изменить url удаленного репозитория
git remote set-url origin <url>

# отправка изменений из локальной ветки в удаленную с созданием связи между ними
# связывается только один раз
git push -u origin <branch name>

# посмотреть список удаленных репозиториев
git remote

# посмотреть настройку удаленного репозитория
git remote -v

# посмотреть как локальная ветка связана с удаленной
git branch -vv
------------------------------------------------------------------------------------------------------------------------
# изменение времени последнего коммита
git commit --amend --no-edit --date="$(date -R)"













"""