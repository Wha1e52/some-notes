<?php

// Constructor Property Promotion
class User {
    public function __construct(public $name, public $email) {}
}

// equal to:
class User {
    public $name;
    public $email;

    public function __construct($name, $email) {
        $this->name = $name;
        $this->email = $email;
    }
}

$obj = new User('John Doe', '2Kt6C@example.com');
echo $obj::class; // возвращает строку с именем класса объекта


/*
Разница между self::class и static::class заключается в том, как они определяют класс при наследовании.

| Свойство             | self::class                          | static::class                         |
|----------------------|--------------------------------------|---------------------------------------|
| Возвращает           | Имя класса, где написан метод.       | Имя класса, который вызывает метод.   |
|----------------------|--------------------------------------|---------------------------------------|
| Статичное/Динамичное | Статичное (на этапе компиляции).     | Динамичное (определяется на этапе выполнения)
|----------------------|--------------------------------------|---------------------------------------|
| Используется для     | Обращения к текущему классу.         | Поддержки наследования и полиморфизма.|

Когда использовать:
self::class:
    Когда вы точно знаете, что используете базовый класс, и наследование не должно влиять на результат.
    Для вызовов внутри строго определённого класса.

static::class:
    Когда вы хотите поддерживать полиморфизм и учитывать, какой класс вызвал метод.
    Для методов или свойств, которые должны "реагировать" на наследование.
*/






















